3. Activity 2: Let's run our first p5.js sketch
Objective: be able to create and run code using the p5.js web editor
p5.js is:
3.1. p5js.org
3.2. editor.p5js.org
3.3. line()
3.4. mouseX/mouseY
3.5. draw a line and move it using mouseX/mouseY


4. Activity: Let's draw some lines

4.1. Making the ends of the line follow the mouse
We can change the length of the line by stopping the commands, changing the parameters to the line command, and then playing the commands again. Not very interesting.
We can also change the length of the line while the commands are playing by having p5.js tell us the x and y coordinates of the mouse and using those values as the parameters to the line command:
    1. Change the last two numbers in the line() command to be the words mouseX and mouseY:
line(x, y, mouseX, mouseY);
    2. Play the sketch and move your mouse around the canvas to see what happens.
4.2. Printing the mouse coordinates
Sometimes it's useful to know what the values for mouseX and mouseY are. We can do that by adding another three lines to our sketch:
function mouseClicked() {
  print(mouseX,mouseY);
}
5. Activity 3: Let's turn our sketches into code


6. Activity 4: Let's add the colours to our sketch
function setup() {
  createCanvas(400, 400);
  rectMode(CORNERS);
}

function draw() {
  background('lightgrey');

  stroke('grey');
  strokeWeight(1);
  line(100,0,100,400);
  line(200,0,200,400);
  line(300,0,300,400);
  line(0,100,400,100);
  line(0,200,400,200);
  line(0,300,400,300);

  stroke('black');
  strokeWeight(0);
  fill('yellow');
  triangle(150,25,290,100,150,175);
  fill('red');
  ellipse(75,275,100);
  fill('blue');
  rect(175,225,290,350);
}
6.1. Changing the colour of the canvas:
    • Change the number in the background() command to the name of a colour (make sure to include the quotation marks around the colour.):
background("pink");
6.2. Changing the line colour:
    • Type in the following line on the line before the line() command:
stroke("green");
6.3. 8) Try changing the line thickness:
    • Type in the following line on the line before the line() command. Replace the word pixels with a number between 0 and 400:
strokeWeight(pixels);
6.4.
6.5. Filling a shape (triangle, rectangle, or ellipse) with a colour:
    • Type in the following line on the line before the command to draw the shape:
fill("purple");
7. Activity: Let's add some randomness to the sketch
What are things that we could have change each time the sketch is run?
What were some of the decisions we had to make when we drew the sketch by hand?
    • placement
    • size
    • colour
8. Activity: Let's randomize placement
9. Activity: Let's randomize size
10. Activity: Let's randomize colour
11. Activity: Let's animate the transition between sketches
        ◦ easing
11.1.
12. Activity: Let's draw some complex shapes
    1. Using beginShape and endShape
    2. Using vertex
    3. Using curveVertex
Activity: replace some of the basic shapes in a virtual drawing into complex shapes
13. Activity: Let's parameterize our shapes
    1. Looping with the draw function
    2. Creating our own functions
    3. Parameterizing our functions
Activity: turn some of the complex shapes into functions and parameterize them so they change with each loop through the draw function
14. What else can we do with p5.js?
    1. Incorporating sketches into a web page
    2. Working with the DOM of a web page
    3. Playing sounds
    4. Playing video
    5. Accessing the webcam
15. Appendix: Resources
